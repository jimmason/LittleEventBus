{
  "name": "Littleeventbus",
  "tagline": "",
  "body": "# Little Event Bus\r\n\r\nLittle event bus is a lightweight event bus for .net applications. Its designed for when you want to incorporate eventing in your application but don't necessarily need CQRS and Event Sourcing. This isn't to say that Little Event Bus cannot be used in these scenarios, but its features and the terminology used are focused on event driven applications over anything else.\r\n\r\n## Obtaining Little Event Bus\r\n\r\nLittle Event Bus is available on Nuget\r\n\r\n```\r\nPM> Install-Package LittleEventBus\r\nPM> Install-Package LittleEventBus.StructureMap\r\n\r\n```\r\nOr via the [GitHub Releases](https://github.com/jimmason/LittleEventBus/releases)\r\n\r\n## Getting Started\r\n\r\n#### Events\r\nEvents should inherit from the Event base class and set the EventId to a new Guid or the Id of your Aggregate Root Object.\r\n\r\n```csharp\r\n    public sealed class OrderPlaced : Event\r\n    {\r\n        public OrderPlaced(Guid id)\r\n        {\r\n            base.EventId = id;\r\n        }\r\n    }\r\n```\r\n\r\n#### The Event Bus\r\n\r\nEvents can be placed on the bus like so.\r\n\r\n```csharp\r\n//Create an event\r\nvar @event = new OrderPlaced(Guid.NewGuid());\r\n\r\n//publish the event\r\nthis.eventBus.PublishEvent(@event);\r\n\r\n//events can also be published asynchronously\r\nthis.eventBus.PublishEventAsync(@event);\r\n\r\n```\r\n\r\n#### Event Handlers\r\nEvent Handlers handle events that are placed on to the bus. Each time an event is published Handle will be called on each event handler.\r\nThese should ideally (though it isn't required) be named in a DoSomethingOnEventName format.\r\nYou can have as many Event Handlers as you like for each event.\r\n\r\n```csharp\r\npublic sealed class EmailCustomerOnOrderPlaced : IEventHandler<OrderPlaced>\r\n    {\r\n        public void Handle(OrderPlaced @event)\r\n        {\r\n            Console.WriteLine(\"Handle Called EmailCustomerOnOrderPlaced Event Handler\");\r\n        }\r\n    }\r\n```\r\n\r\n## Setup for various IoC Containers\r\n\r\nLittle Event Bus Requires the usage of an IoC Container. Support for which is supplied via each containers own library. The long term goal is to support all major Containers, the following are currently supported.\r\n\r\n- StructureMap\r\n- NanoIoC\r\n\r\n\r\n#### Setup for NanoIoC\r\n\r\nEnsure you are calling the following in your applications startup\r\n\r\n```csharp\r\n\r\nContainer.Global.RunAllRegistries();\r\nContainer.Global.RunAllTypeProcessors();\r\n\r\n```\r\n\r\n#### Setup for StructureMap\r\n\r\nA registry is provided for StructureMap. Ensure you include the following when configuring StructureMap.\r\nIf you are using this registry you will need to provide a type of one of your event handlers so it knows where to look\r\n\r\n```chsharp\r\nx.AddRegistry(new LittleEventBusRegistry(typeof([OneOfYourEventHandlers])));\r\n\r\n```\r\n\r\n## Testing\r\n\r\nFor testing a purely synchronous implementation of IEventBus is provided in the form of SynchronousEventBus. This can be swapped in to ensure that Asynchronous events are published in a Synchronous manner.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}